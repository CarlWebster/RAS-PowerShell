<#
.SYNOPSIS
This is the start up script for CitrixMigration.ps1

.DESCRIPTION
This is the start up script for CitrixMigration.ps1

.PARAMETER XmlPathWorkgroups
Path to workgroups XML exported from Citrix XenApp

.PARAMETER XmlPathZones
Path to zones xml exported from Citrix XenApp

.PARAMETER XmlPathServers
Path to servers xml exported from Citrix XenApp

.PARAMETER XmlPathApplications
Path to applications XML export from Citrix XenApp

.EXAMPLE
./Run.ps1

./Run.ps1 -server 1.1.1.1 -username "username" -zonesXmlPath "zones.xml" -workgroupXmlPath "workgroups.xml" -applicationXmlPath "apps.xml" -serversXmlPath "servers.xml"
.NOTES
The Citrix XenApp XML settings files that are required for this script are to be generated by the administrator.
Settings files can be exported using these commands:
Add-PSSnapin citrix.xenapp.commands
Get-XAApplicationReport * | Export-Clixml "./res/applications.xml"
Get-XAZone | Export-Clixml "./res/zones.xml"
Get-XAServer * | Export-Clixml "./res/servers.xml"
Get-XAWorkerGroup | Export-Clixml "./res/workergroups.xml"
#>
Param(
	[Parameter(Mandatory = $true)]
	[string] $XmlPathWorkgroups,
	[Parameter(Mandatory = $true)]
	[string] $XmlPathZones,
	[Parameter(Mandatory = $true)]
	[string] $XmlPathServers,
	[Parameter(Mandatory = $true)]
	[string] $XmlPathApplications,
	[Parameter(Mandatory = $false)]
	[string] $XmlPathFarm = $null
)

# $XmlPathWorkgroups = "./XmlMock/workergroups.xml"
# $XmlPathZones = "./XmlMock/zones.xml"
# $XmlPathServers = "./XmlMock/servers.xml"
# $XmlPathApplications = "./XmlMock/applications.xml"
# $XmlPathFarm = "./XmlMock/farm.xml"

[System.IO.Directory]::SetCurrentDirectory($PSScriptRoot)
. "./RASMigrationEngine.ps1"

function Main {
	$settings = SetSettings @{
		ScriptPath = "./MigrationScript.ps1"
		IconPath   = "./icons"
	}

	# try {
	Log -type "INFO" -message "Parsing XML into memory database ..."
	[System.Data.DataSet]$db = ParseXMLtoDB -zonesXmlPath $XmlPathZones -serversXmlPath $XmlPathServers -workgroupXmlPath $XmlPathWorkgroups -applicationXmlPath $XmlPathApplications -farmXmlPath $XmlPathFarm
	# }
	# catch [Exception] {
	# Log -type "ERROR" -message "Failed to run RAS Migration engine." -exception $_.Exception
	# return
	# }
	Log -type "INFO" -message "In-memory database ready!"

	Log -type "INFO" -message "Generating migration script ..."
	InitializeScript -appendToMain {
		MigrateSites($db)
		MigrateServers($db)
		MigrateGroups($db)
		MigrateFolders($db)
		MigrateApplications($db)
		WriteToScript "Remove-RASSession"
	}

	Log -type "INFO" -message "Migration script generated! :)"
	Log -type "INFO" -message "Migration script is saved in $($settings.ScriptPath)" -tabSize 1
	Log -type "INFO" -message "Icon '.ico' files are saved in $($settings.IconPath)" -tabSize 1
}

Main
